/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* Layers */
#define QWERTY 0
#define NUMNAV 1
#define FUNCTL 2

&caps_word {
  continue-list = <UNDERSCORE MINUS DEL BKSP>;
};

//&mt {
//  quick-tap-ms = <125>;
//};

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

/ {
        behaviors {
                mtb: mod-tap-balanced {
                        compatible = "zmk,behavior-hold-tap";
                        label = "MOD_TAP_BALANCED";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        tapping-term-ms = <250>;
                        quick-tap-ms = <200>;
                        bindings = <&kp>, <&kp>;
                };
                ltb: layer-tap-balanced {
                        compatible = "zmk,behavior-hold-tap";
                        label = "LAYER_TAP_BALANCED";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        tapping-term-ms = <250>;
                        quick-tap-ms = <200>;
                        bindings = <&mo>, <&kp>;
                };
                tto: tap-to-layer {
                        compatible = "zmk,behavior-hold-tap";
                        label = "TAP_TO_LAYER";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        tapping-term-ms = <250>;
                        quick-tap-ms = <200>;
                        bindings = <&to>, <&kp>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
// --------------------------------------------------------------------------------------------------------------------
// |   |  Q        |  W        |  E        |  R       |  T  |   |  Y  |  U      |  I      |  O        |  P        |   |
// |   |  LSHFT/A  |  LCTRL/S  |  LALT/D   |  LCMD/F  |  G  |   |  H  |  RCMD/J | RALT/K  |  RCTRL/L  |  RSHFT/;  |   |
// |   |  Z^(      |  X        |  C        |  V       |  B  |   |  N  |  M      |  ,      |  .        |  /^)      |   |
//                   | ESC^FUNCTL | FUNCTL/TAB | NUMNAV/SPC |   | NUMNAV/SPC | FUNCTL/BSPC | RET^NUMNAV |
                        bindings = <
        &none &kp Q        &kp W        &kp E       &kp R       &kp T   &kp Y &kp U       &kp I       &kp O        &kp P           &none
        &none &mtb LSHFT A &mtb LCTRL S &mtb LALT D &mtb LCMD F &kp G   &kp H &mtb RCMD J &mtb RALT K &mtb RCTRL L &mtb RSHFT SEMI &none
        &none &mtb LPAR Z  &kp X        &kp C       &kp V       &kp B   &kp N &kp M       &kp COMMA   &kp DOT      &mtb RPAR FSLH  &none
                    &tto FUNCTL ESC &ltb FUNCTL TAB &ltb NUMNAV SPACE   &ltb NUMNAV SPACE &ltb FUNCTL BSPC &tto NUMNAV RET
                        >;
                };
                numnav_layer {
                        label = "NUMNAV";
// -----------------------------------------------------------------------------------------
// |   |  1  |  2  |  3  |  4      |  5  |   |  6  |  7  |  8  |  9  |  0  |   |
// |   |     |     |     | CPS_WRD |     |   | LFT | DWN |  UP | RGT |  +  |   |
// |   |     |     |     |         |     |   | HOM | PGD | PGU | END | INS |   |
// | LALT/QWERTY | LCMD/TAB | FUNCTL/SPC |   | FUNCTL/SPC | RCMD/DEL | RALT/FUNCTL |
                        bindings = <
   &none  &kp N1            &kp N2          &kp N3          &kp N4          &kp N5     &kp N6   &kp N7         &kp N8       &kp N9           &kp N0         &none
   &none  &mtb LSHFT GRAVE  &mtb LCTRL HOME &mtb LALT PG_UP &mtb LCMD PG_DN &kp END    &kp LEFT &mtb RCMD DOWN &mtb RALT UP &mtb RCTRL RIGHT &mtb RSHFT SQT &none
   &none  &kp LBKT          &none           &none           &none           &kp CAPS   &kp DEL  &kp MINUS      &kp EQUAL    &kp BSLH         &kp RBKT       &none
                                           &tto QWERTY ESC &ltb FUNCTL TAB &kp SPACE   &kp SPACE &ltb FUNCTL BSPC &tto FUNCTL RET
                        >;
                };
                functl_layer {
                        label = "FUNCTL";
// -----------------------------------------------------------------------------------------
// |          | F1  | F2  | F3  | F4      | F5     |   | F6  | F7  | F8 | F9 | F10 | Å      |
// | CTRL/ESC | BT1 | BT2 | BT3 | BT4     | BT5    |   |     |     |    |    | Ö   | CTRL/Ä |
// | SHFT     |     |     |     | OUT_TOG | BT_CLR |   | F11 | F12 |    |    |     | SHFT   |
//               | LALT/NUMNAV | LCMD | QWERTY/SPC |   | QWERTY/SPC | RCMD | RALT/QWERTY |
                        bindings = <
   &none  &kp F1       &kp F2       &kp F3       &kp F4       &kp F5         &kp F6     &kp F7        &kp F8       &kp F9         &kp F10        &none
   &none  &kp LSHFT    &kp LCTRL    &kp LALT     &kp LCMD     &none          &none      &kp RCMD      &kp RALT     &mtb RCTRL F11 &mtb RSHFT F12 &none
   &none  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &bt BT_CLR &out OUT_BLE  &out OUT_USB &none          &none          &none
                                         &tto NUMNAV ESC &kp TAB &kp SPACE   &kp SPACE &kp BSPC &tto QWERTY RET
                        >;
                };
//                                &mt LALT &to NUMNAV &mt LCMD TAB &lt QWERTY SPACE   &lt QWERTY SPACE &mt RCMD DEL &mt RALT &to QWERTY
        };
};
